name: Docker

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 23 * * *'

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  build:
    name: Pull
    runs-on: ubuntu-latest
    steps:
    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Build and push image Aliyun
      run: |
        docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY
        # Êï∞ÊçÆÈ¢ÑÂ§ÑÁêÜ,Âà§Êñ≠ÈïúÂÉèÊòØÂê¶ÈáçÂêç
        declare -A duplicate_images
        declare -A temp_map
        while IFS= read -r line; do
            [[ -z "$line" ]] && continue
            image=$(echo "$line" | awk '{print $NF}')
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            name_space=$(echo "$image" | awk -F'/' '{if (NF>1) print $1}'| awk '{print $1}')
            name_space="${name_space}_"
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            
            if [[ -n "${temp_map[$image_name]}" ]]; then
                 if [[ "${temp_map[$image_name]}" != $name_space  ]]; then
                    echo "duplicate image name: $image_name"
                    duplicate_images[$image_name]="true"
                 fi
            else
                temp_map[$image_name]=$name_space
            fi       
        done < images.txt
        
        # Â≠òÂÇ®ÈîôËØØÈïúÂÉèÁöÑÊï∞ÁªÑ
        error_images=()
        
        while IFS= read -r line; do
            [[ -z "$line" ]] && continue
            echo "Processing image: $line"
            
            # ÊèêÂèñÈïúÂÉèÂêçÁß∞ÔºàÂøΩÁï•--platformÂèÇÊï∞Ôºâ
            image=$(echo "$line" | awk '{for(i=1;i<=NF;i++) if ($i !~ /^--platform=/) image=$i; print image}')
            
            # Â∞ùËØïÊãâÂèñÈïúÂÉèÂπ∂ÊçïËé∑ÈîôËØØ
            if ! docker pull "$image"; then
                echo "‚ùå Error pulling image: $image" >&2
                error_images+=("$image")
                continue
            fi
            
            # ÊèêÂèñplatformÂèÇÊï∞
            platform=$(echo "$line" | awk '{for(i=1;i<=NF;i++) if ($i ~ /^--platform=/) print substr($i, 12)}')
            platform_prefix="${platform//\//_}_"
            
            # ÊûÑÂª∫Êñ∞ÈïúÂÉèÂêçÁß∞
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            name_space=$(echo "$image" | awk -F'/' '{if (NF>1) print $1}'| awk '{print $1}')
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            
            name_space_prefix=""
            if [[ -n "${duplicate_images[$image_name]}" && -n "$name_space" ]]; then
                name_space_prefix="${name_space}_"
            fi
            
            new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$platform_prefix$name_space_prefix$image_name_tag"
            
            # Ê†áËÆ∞Âπ∂Êé®ÈÄÅÈïúÂÉèÔºàÊ∑ªÂä†ÈîôËØØÂ§ÑÁêÜÔºâ
            if ! docker tag "$image" "$new_image"; then
                echo "‚ùå Error tagging image: $image as $new_image" >&2
                error_images+=("$image")
                continue
            fi
            
            if ! docker push "$new_image"; then
                echo "‚ùå Error pushing image: $new_image" >&2
                error_images+=("$new_image")
                continue
            fi
            
            echo "‚úÖ Successfully processed: $new_image"
        done < images.txt
        
        # ËæìÂá∫ÊâÄÊúâÈîôËØØÈïúÂÉè
        if [ ${#error_images[@]} -gt 0 ]; then
            echo "========================================"
            echo "‚ö†Ô∏è Failed to process ${#error_images[@]} images:"
            for img in "${error_images[@]}"; do
                echo "- $img"
            done
            exit 1 # ÂèØÈÄâÔºöËÆ©Â∑•‰ΩúÊµÅÊ†áËÆ∞‰∏∫Â§±Ë¥•
        else
            echo "üéâ All images processed successfully!"
        fi
